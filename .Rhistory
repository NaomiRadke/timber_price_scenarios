# Install packages if necessary, and load them.
# install.packages("lhs")
# install.packages("compiler")
library(lhs)
library(compiler)
enableJIT(3)
dir.create("lab_X")
dir.path <- paste(getwd(), "/lab_X/", sep="")
scrim.git.path <- "https://raw.githubusercontent.com/scrim-network/"
scrim.git.path <- "https://raw.githubusercontent.com/scrim-network/"
# Sea-level change data
url <- paste(scrim.git.path, "BRICK/master/data/GMSL_ChurchWhite2011_yr_2015.txt", sep="")
church.data <- read.table("lab_X/GMSL_ChurchWhite2011_yr_2015.txt")
download.file(url, paste(dir.path, "GMSL_ChurchWhite2011_yr_2015.txt", sep=""))
church.data <- read.table("lab_X/GMSL_ChurchWhite2011_yr_2015.txt")
year.hist <- floor(church.data[ ,1])
slr.hist <- church.data[ ,2]
slr.err <- church.data[ ,3]
?floor()
View(church.data)
url <- paste(scrim.git.path,
"Ruckertetal_SLR2016/master/RFILES/Data/NOAA_IPCC_RCPtempsscenarios.csv",
sep="")
download.file(url, paste(dir.path, "NOAA_IPCC_RCPtempsscenarios.csv", sep=""))
temp.data <- read.csv("lab_X/NOAA_IPCC_RCPtempsscenarios.csv")
temp.hist <- temp.data$Historical.NOAA.temp.
?match()
ibeg <- match(year.hist[1], temp.data$Time)
iend <- match(max(year.hist), temp.data$Time)
a <- year.hist[1] %in% temp.data$Time
temp.hist <- temp.hist[ibeg:iend]
ind.norm <- match(1951, year.hist):match(1980, year.hist)
temp.hist <- temp.hist - mean(temp.hist[ind.norm])
temp.hist[ind.norm]
temp.hist
temp.hist <- temp.data$Historical.NOAA.temp.
View(temp.data)
temp.data$Historical.NOAA.temp..respect.to.20th.century
temp.hist <- temp.hist[ibeg:iend]
temp.hist <- temp.data$Historical.NOAA.temp..respect.to.20th.century
temp.hist[ibeg:iend]
temp.hist <- temp.hist[ibeg:iend]
ind.norm <- match(1951, year.hist):match(1980, year.hist)
temp.hist <- temp.hist - mean(temp.hist[ind.norm])
slr.hist <- slr.hist - mean(slr.hist[ind.norm])
ibeg <- match(year.hist[1], temp.data$Time)
iend <- match(2100, temp.data$Time)
temp.proj <- temp.data$Historical.NOAA.temp...RCP.8.5[ibeg:iend]
year.proj <- temp.data$Time[1:match(2100, temp.data$time)]
View(temp.data)
year.proj <- temp.data$Time[1:match(2100, temp.data$Time)]
ind.norm <- match(1951, year.proj):match(1980, year.proj)
temp.proj <- temp.proj - mean(temp.proj[ind.norm])
View(temp.data)
temp.proj <- temp.data$Historical.NOAA.temp...CNRM.RCP.8.5.with.respect.to.20th.century[ibeg:iend]
year.proj <- temp.data$Time[1:match(2100, temp.data$Time)]
ind.norm <- match(1951, year.proj):match(1980, year.proj)
temp.proj <- temp.proj - mean(temp.proj[ind.norm])
url <- paste(scrim.git.path, "BRICK/master/R/gmsl_r07.R", sep="")
download.file(url, paste(dir.path, "gmsl_r07.R", sep=""))
source("lab_X/gmsl_r07.R")
tstep = 1
model0 <- gmsl_r07(sl_temp_sens=3.4, temp_equil=-0.5, sl0=slr.hist[1],
tstep=tstep, temperature_forcing=temp.hist)
url
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
source("lab_X/gmsl_r07.R")
tstep = 1
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
source("lab_X/gmsl_r07.R")
tstep = 1
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
slr.hist[1]
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, sl0=-118,
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model0 <- gmsl_r07(a=3.4, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
source("lab_X/gmsl_r07.R")
model0 <- gmsl_r07(a=3.4, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
plot(year.hist, slr.hist, type='p', col='red', xlab='Year', ylab='Sea level [mm]')
lines(year.hist, model0, lwd=2)
legend(1880, 200, c('Model 0','Data'), lty=c(1,NA),
pch=c(NA,1), col=c('black','red'), bty='n')
model1 <- gmsl_r07(a=3.74, Teq=-0.5, sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
model1 <- gmsl_r07(a=3.74, Teq=-0.5, Sl0=slr.hist[1],
tstep=tstep, Tg=temp.hist)
plot(year.hist, slr.hist, type='p', col='red', xlab='Year', ylab='Sea level [mm]')
lines(year.hist, model1, lwd=2)
legend(1880, 200, c('Model 1','Data'), lty=c(1,NA),
pch=c(NA,1), col=c('black','red'), bty='n')
sens_2013 <- function(parameters, temperature_forcing, tstep=1) {
# Run the GMSL model with the given parameters and forcing
model <- gmsl_r07(a=parameters[1],
Teq=parameters[2],
Sl0=parameters[3],
tstep=tstep,
Tg=temperature_forcing)
# Grab and return the sea level from 2013, the last year
return(model[length(model)])
}
set.seed(11)
n = 10
alphas <- runif(min=0, max=5, n=n)
Teqs <- runif(min=-1.5, max=0.5, n=n)
plot(alphas, Teqs, xlim=c(0,5), ylim=c(-1.5,0.5),
xlab=expression(alpha), ylab=expression(T[eq]))
set.seed(11)
# Draw a Latin hypercube sample with k=2 parameters and n samples
parameters <- randomLHS(k=2, n=n)
# Scale the parameters
alphas <- parameters[,1]*5
Teqs <- parameters[,2]*2 - 1.5
# Make a scatter plot of the parameter samples
plot(alphas, Teqs, xlim=c(0, 5), ylim=c(-1.5, 0.5),
xlab=expression(alpha), ylab=expression(T[eq]))
sens_2013 <- function(parameters, temperature_forcing, tstep=1) {
# Run the GMSL model with the given parameters and forcing
model <- gmsl_r07(a=parameters[1],
Teq=parameters[2],
Sl0=parameters[3],
tstep=tstep,
Tg=temperature_forcing)
# Grab and return the sea level from 2013, the last year
return(model[length(model)])
}
set.seed(11)
# draw parameters
n <- 1000
parameters <- randomLHS(k=2, n=n)
# scale the parameters appropriately
alphas <- parameters[,1] <- parameters[,1]*5
Teqs <- parameters[,2] <- parameters[,2]*2 - 1.5
# create an array to store all of the necessary parameters, including S0
parameters <- cbind(parameters, rep(slr.hist[1], n))
# run the model with Latin hypercube parameters, and calculate sensitivity measure
sens_lhs <- sapply(1:n, function(s) sens_2013(parameters[s,], temp.hist, tstep))
# interpolate the irregular results to a grid
fld <- interp(alphas,Teqs,sens_lhs)
# make a contour plot
contour(fld, xlab=expression(alpha), ylab=expression(T[eq]))
install.packages("interp")
library(interp)
set.seed(11)
# draw parameters
n <- 1000
parameters <- randomLHS(k=2, n=n)
# scale the parameters appropriately
alphas <- parameters[,1] <- parameters[,1]*5
Teqs <- parameters[,2] <- parameters[,2]*2 - 1.5
# create an array to store all of the necessary parameters, including S0
parameters <- cbind(parameters, rep(slr.hist[1], n))
# run the model with Latin hypercube parameters, and calculate sensitivity measure
sens_lhs <- sapply(1:n, function(s) sens_2013(parameters[s,], temp.hist, tstep))
# interpolate the irregular results to a grid
fld <- interp(alphas,Teqs,sens_lhs)
# make a contour plot
contour(fld, xlab=expression(alpha), ylab=expression(T[eq]))
rm(list=ls())
?dataframe.in
?map.range()
install.packages(DataCombine)
install.packages("DataCombine")
library(dplyr)
library(zoo)
library(DataCombine)
df = expand.grid(site = factor(seq(10)),
year = 2000:2004,
day = 1:50)
View(df)
df$temp = rpois(dim(df)[1], 5)
# Assume rains 33% of the days and averages 5 mm each time but highly variable
df$precip = rbinom(dim(df)[1], 1, 1/3) * rlnorm(dim(df)[1], log(5), 1)
View(df)
df = df[order(df$site, df$year, df$day), ]
df.slide = slide(df, Var = "temp", GroupVar = c("site", "year"), slideBy = -1, NewVar='temp.lag1')
head(df.slide, 75)
rm(list=ls())
df = expand.grid(site = factor(seq(10)),
year = 2000:2004,
day = 1:50)
# use Poisson to make math easy to check moving means of temperature
df$temp = rpois(dim(df)[1], 5)
# Assume rains 33% of the days and averages 5 mm each time but highly variable
df$precip = rbinom(dim(df)[1], 1, 1/3) * rlnorm(dim(df)[1], log(5), 1)
df2 = df %>%
group_by(site, year) %>%
arrange(site, year, day) %>%
mutate(temp.5 = rollmean(x = temp, 5, align = "right", fill = NA))
View(df2)
View(df2)
View(df)
df3 = df2 %>%
mutate(temp.lag1 = lag(temp, n = 1)) %>%
mutate(temp.5.previous = rollapply(data = temp.lag1,
width = 5,
FUN = mean,
align = "right",
fill = NA,
na.rm = T))
View(df3)
load("~/Step 2_applying OpenMORDM/Case study/Precalibration/model_precalibration/for_Cluster/DEoptim_out2018-11-05.RData")
plot(out_DEoptim)
load("~/Step 2_applying OpenMORDM/Case study/Precalibration/model_precalibration/for_Cluster/DEoptim_out2018-11-07.RData")
library(DEoptim)
?Deoptim()
?DEoptim()
plot(out_DEoptim, plot.type = "bestmemit")
plot(out_DEoptim, plot.type = "bestmemit")
library(DEoptim)
?DEoptim(DEoptim)
ls(globalenv())
?sprintf
scen_model_params <- sprintf("p_%d", seq(1:20))
scen_DI <- sprintf("DI_%d", seq(1:20))
scen_DR <- sprintf("DR_%d", seq(1:5))
scen_DR <- sprintf("DR_%d", seq(1:5))
scen_WP <- sprinf("WP_%d", seq(1:20))
scen_CT <- sprintf("CT_%d", seq(1:20))
scen_WP <- sprintf("WP_%d", seq(1:20))
scenarios <- expand.grid(scen_model_params, scen_DI, scen_DR, scen_WP, scen_CT)
View(scenarios)
scenarios <- expand.grid("model" = scen_model_params, "DI" = scen_DI, "DR" = scen_DR, "WP" = scen_WP, "CT" = scen_CT)
View(scenarios)
View(scenarios)
scen_model_params <- sprintf("p_%d", seq(1:20))
scen_DI <- seq(1:20)
scen_DR <- seq(1:5)
scen_WP <- seq(1:20)
scen_CT <- seq(1:20)
# Create a total enumeration of individual scenarios to create total scenarios
scenarios <- expand.grid("model" = scen_model_params, "DI" = scen_DI, "DR" = scen_DR, "WP" = scen_WP, "CT" = scen_CT)
View(scenarios)
scen_model_params <- seq(1:20)
scenarios <- expand.grid("model" = scen_model_params, "DI" = scen_DI, "DR" = scen_DR, "WP" = scen_WP, "CT" = scen_CT)
View(scenarios)
load("~/Step 2_applying OpenMORDM/Case study/Precalibration/model_precalibration/for_Cluster/DEoptim_out_vol_2018-11-15.RData")
library(DEoptim)
plot(out_DEoptim, plot.type = "bestmemit")
plot(out_DEoptim, plot.type = "bestmemit")
setwd("~/Step2_MORDM/Case_study/timber_price_scenarios")
library(fitdistrplus) # for fitting distribution
library(lhs) # for Latin Hypercube Sampling
library(ggplot2) # for plotting
library(reshape) # for melting columns for ggplot
# Load data
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- year(C_tax$Date)
C_tax_yearly <- aggregate(C_tax ~ Year, C_tax, mean)
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date))
ggplot(C_tax_yearly, aes(x=Year, y=C_tax))+
geom_line()
View(scenarios)
View(C_tax_scen)
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date))
View(C_tax_scen)
C_tax_scen_long <- melt(C_tax_scen, id.vars = "Date") # change from wide to long format for plotting
ggplot(C_tax_scen_long, aes(x=Date, y = value))+
geom_line(aes(colour = variable))+
geom_line(data = C_tax_yearly, aes(y=C_tax, x = Year))+
ylab("Carbon price (Euro/ton C)")+
stat_summary(fun.y = mean, geom = "line", lwd = 2)
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- year(C_tax$Date)
library(fitdistrplus) # for fitting distribution
library(lhs) # for Latin Hypercube Sampling
library(ggplot2) # for plotting
library(reshape) # for melting columns for ggplot
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- year(C_tax$Date)
C_tax_yearly <- aggregate(C_tax ~ Year, C_tax, mean)
format(C_tax$Date, "%Y")
C_tax$Year <- format(C_tax$Date, "%Y")
View(C_tax)
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- year(C_tax$Date)
C_tax$Year <- format(C_tax$Date, "%Y")
C_tax_yearly <- aggregate(C_tax ~ Year, C_tax, mean)
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
View(C_tax_scen)
str(C_tax_scen)
View(C_tax_yearly)
C_tax_scen$Date <- as.character.Date(C_tax_scen$Date)
str(C_tax_scen)
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date), "%Y")
str(C_tax_scen)
ggplot(C_tax_yearly, aes(x=Year, y=C_tax))+
geom_line()
C_tax_scen_long <- melt(C_tax_scen, id.vars = "Date") # change from wide to long format for plotting
ggplot(C_tax_scen_long, aes(x=Date, y = value))+
geom_line(aes(colour = variable))+
geom_line(data = C_tax_yearly, aes(y=C_tax, x = Year))+
ylab("Carbon price (Euro/ton C)")+
stat_summary(fun.y = mean, geom = "line", lwd = 2)
View(C_tax_yearly)
ggplot(C_tax_scen_long, aes(x=Date, y = value))+
geom_line(aes(colour = variable))+
#geom_line(data = C_tax_yearly, aes(y=C_tax, x = Year))+
ylab("Carbon price (Euro/ton C)")+
stat_summary(fun.y = mean, geom = "line", lwd = 2)
View(C_tax_yearly)
dev.off()
ggplot(C_tax_scen_long, aes(x=Date, y = value))+
geom_line(aes(colour = variable))+
geom_line(data = C_tax_yearly, aes(y=C_tax, x = Year))+
ylab("Carbon price (Euro/ton C)")+
stat_summary(fun.y = mean, geom = "line", lwd = 2)
str(C_tax_yearly)
C_tax_yearly$Date <- format(C_tax_yearly$Date, "%Y")
ggplot(C_tax_scen_long, aes(x=Date, y = value))+
geom_line(aes(colour = variable))+
geom_line(data = C_tax_yearly, aes(y=C_tax, x = Year))+
ylab("Carbon price (Euro/ton C)")+
stat_summary(fun.y = mean, geom = "line", lwd = 2)
C_tax_yearly$Year <- format(C_tax_yearly$Date, "%Y")
View(C_tax_yearly)
rm(list=ls())
library(fitdistrplus) # for fitting distribution
library(lhs) # for Latin Hypercube Sampling
library(ggplot2) # for plotting
library(reshape) # for melting columns for ggplot
# Load data
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- format(C_tax$Date, "%Y")
C_tax_yearly <- aggregate(C_tax ~ Year, C_tax, mean)
C_tax_yearly$Year <- format(C_tax_yearly$Date, "%Y")
View(C_tax_yearly)
C_tax_yearly$Year <- format(C_tax_yearly$Year, "%Y")
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- format(C_tax$Date, "%Y")
C_tax_yearly <- aggregate(C_tax ~ Year, C_tax, mean)
C_tax_yearly$Year <- as.Date(C_tax_yearly$Year)
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- format(C_tax$Date, "%Y")
C_tax_yearly <- aggregate(C_tax ~ Year, C_tax, mean)
View(C_tax_yearly)
View(C_tax)
chr(C_tax_yearly)
str(C_tax_yearly)
C_tax_yearly$Year <- as.Date(C_tax_yearly$Year, "%Y")
str(C_tax_yearly)
ggplot(C_tax_scen_long, aes(x=Date, y = value))+
geom_line(aes(colour = variable))+
geom_line(data = C_tax_yearly, aes(y=C_tax, x = Year))+
ylab("Carbon price (Euro/ton C)")+
stat_summary(fun.y = mean, geom = "line", lwd = 2)
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date), "%Y")
# make a graph and historgram of the carbon tax
# recorded data
ggplot(C_tax_yearly, aes(x=Year, y=C_tax))+
geom_line()
C_tax_scen_long <- melt(C_tax_scen, id.vars = "Date") # change from wide to long format for plotting
ggplot(C_tax_scen_long, aes(x=Date, y = value))+
geom_line(aes(colour = variable))+
geom_line(data = C_tax_yearly, aes(y=C_tax, x = Year))+
ylab("Carbon price (Euro/ton C)")+
stat_summary(fun.y = mean, geom = "line", lwd = 2)
WP <- read.csv("Data/carbon_tax.csv", sep = ";")# read the data from csv
CT <- read.csv("Data/carbon_tax.csv", sep = ";")# read the data from csv
rm(WP)
rm(list=ls())
CT <- read.csv("Data/carbon_tax.csv", sep = ";")# read the data from csv
library(forecast) # for fitting arima and forecasting
library(tseries)  # for turning data into time series data
library(ggplot2)  # for plotting
View(CT)
View(CT)
View(CT)
str(CT)
C_tax <- read.csv("Data/carbon_tax.csv", sep = ";") #record
C_tax$Date <- as.Date(C_tax$Date, "%d.%m.%Y") # change date column to date format
C_tax$Year <- format(C_tax$Date, "%Y") # add a year column in date format
C_tax_yearly <- aggregate(C_tax ~ Year, C_tax, mean)
C_tax_yearly$Year <- as.Date(C_tax_yearly$Year, "%Y") # change year from character to date format
C_tax_ts <- ts(C_tax_yearly$C_tax, start = 2005)
plot.ts(C_tax_ts)
auto <- auto.arima(C_tax_ts, stepwise = FALSE, approximation = FALSE, seasonal = FALSE)  # stepwise+approximation set
summary(CT_arima) # shows the fitted arima model
CT_arima <- auto.arima(C_tax_ts, stepwise = FALSE, approximation = FALSE, seasonal = FALSE)  # stepwise+approximation set
summary(CT_arima) # shows the fitted arima model
n.yrs = 30 # number of forecasted years
n.sim = 10 # number of sampled future trajectories
# Simulating n.sim future trajectories (from adding bootstrapped residuals to forecast)
sim <- ts(matrix(0, nrow = n.yrs, ncol = n.sim), start = end(C_tax_ts)[1]+1) # empty ts matrix to be filled with simulations
for(i in 1:n.sim){
sim[,i] <- simulate(CT_arima, nsim = n.yrs)
}
autoplot(C_tax_ts)+
ylim(c(0,25))+
autolayer(sim)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
autoplot(C_tax_ts)+
ylim(c(0,50))+
autolayer(sim)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
autoplot(C_tax_ts)+
ylim(c(0,60))+
autolayer(sim)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
rec_sim <- autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
dev.off()
rec_sim <- autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
rec_sim
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date), "%Y")
dev.off()
rec_sim + geom_line(C_tax_scen$PC_Ref)
rec_sim + geom_line(aes(x = C_tax_scen$Date, y = C_tax_scen$PC_Ref)
)
View(C_tax_scen)
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date), "%Y") # change date column to yearly date format
View(C_tax_scen)
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
View(C_tax_scen)
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date), "%Y") # change date column to yearly date format
View(C_tax)
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
View(C_tax)
C_tax_scen <- read.csv("Data/carbon_scenarios.csv", sep = ";") # scenarios
View(C_tax_scen)
C_tax_scen$Date <- as.Date(as.character(C_tax_scen$Date), "%Y") # change date column to yearly date format
View(C_tax_scen)
C_tax_scen$Date <- format(as.character(C_tax_scen$Date), "%Y") # change date column to yearly date format
C_tax_scen$Date <- format(C_tax_scen$Date, "%Y") # change date column to yearly date format
View(C_tax_scen)
str(C_tax_scen)
rec_sim
str(sim)
View(C_tax_scen)
scen <- ts(as.matrix(C_tax_scen[,-1]), start = 2019)
rec_sim <- autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim)+
autolayer(scen)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
dev.off()
rec_sim <- autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim)+
#autolayer(scen)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
?autolayer()
rec_sim
dev.off()
rec_sim <- autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim)+
autolayer(scen)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
rec_sim
rec_sim <- autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim, colour = FALSE)+
autolayer(scen)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
autoplot(C_tax_ts)+
ylim(c(0,70))+
autolayer(sim, colour = FALSE)+
autolayer(scen)+
labs(title = "Carbon tax development and plausible future paths", y = "Carbon tax (Euro/ton C)")+
theme_bw()+
theme(legend.position = "none")
